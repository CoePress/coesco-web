generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ORGANIZATION MODELS
model User {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String?
  microsoftId String?   @unique
  role        UserRole  @default(USER)
  isActive    Boolean   @default(false)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employee Employee?

  @@map("users")
}

model Employee {
  id          String    @id @default(uuid())
  userId      String    @unique
  number      String    @unique
  firstName   String
  lastName    String
  email       String?   @unique
  phoneNumber String?
  isActive    Boolean   @default(true)
  hireDate    DateTime?
  jobTitle    String
  initials    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  user             User      @relation(fields: [userId], references: [id])
  journeys         Journey[] @relation("RsmJourneys")
  createdCompanies Company[] @relation("CustomerCreatedBy")
  createdJourneys  Journey[] @relation("JourneyCreatedBy")
  createdQuotes    Quote[]   @relation("QuoteCreatedBy")
  approvedQuotes   Quote[]   @relation("QuoteApprovedBy")
  ownedQuotes      Quote[]   @relation("QuoteOwnedBy")

  @@index([number])
  @@index([createdById])
  @@map("employees")
}

// CONFIGURATION MODELS
model ProductClass {
  id          String    @id @default(uuid())
  code        String    @unique
  name        String
  description String?
  parentId    String?
  depth       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  parent                       ProductClass?                @relation("ProductClassHierarchy", fields: [parentId], references: [id])
  children                     ProductClass[]               @relation("ProductClassHierarchy")
  optionDetails                OptionDetails[]
  configurations               Configuration[]
  productClassOptionCategories ProductClassOptionCategory[]

  @@index([createdById])
  @@map("product_classes")
}

model OptionCategory {
  id            String    @id @default(uuid())
  name          String    @unique
  description   String?
  allowMultiple Boolean   @default(false)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  createdById   String
  updatedById   String

  optionHeaders                OptionHeader[]
  productClassOptionCategories ProductClassOptionCategory[]

  @@index([createdById])
  @@map("option_categories")
}

model ProductClassOptionCategory {
  productClassId   String
  optionCategoryId String
  displayOrder     Int       @default(0)
  isRequired       Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  createdById      String
  updatedById      String

  productClass   ProductClass   @relation(fields: [productClassId], references: [id], onDelete: Cascade)
  optionCategory OptionCategory @relation(fields: [optionCategoryId], references: [id], onDelete: Cascade)

  @@id([productClassId, optionCategoryId])
  @@index([createdById])
  @@map("product_class_option_categories")
}

model OptionHeader {
  id          String    @id @default(uuid())
  categoryId  String
  name        String
  code        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  category             OptionCategory        @relation(fields: [categoryId], references: [id])
  optionDetails        OptionDetails[]
  optionRuleTargets    OptionRuleTarget[]
  optionRuleTriggers   OptionRuleTrigger[]
  configurationOptions ConfigurationOption[]

  @@index([createdById])
  @@map("option_headers")
}

model OptionDetails {
  id             String    @id @default(uuid())
  productClassId String
  optionHeaderId String
  price          Decimal
  displayOrder   Int       @default(0)
  isActive       Boolean   @default(true)
  isDefault      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  createdById    String
  updatedById    String

  productClass ProductClass @relation(fields: [productClassId], references: [id])
  optionHeader OptionHeader @relation(fields: [optionHeaderId], references: [id])

  @@unique([productClassId, optionHeaderId])
  @@index([createdById])
  @@map("option_details")
}

model OptionRule {
  id          String           @id @default(uuid())
  name        String
  description String?
  action      OptionRuleAction
  priority    Int              @default(0)
  isActive    Boolean          @default(true)
  condition   Json
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  targetOptions  OptionRuleTarget[]
  triggerOptions OptionRuleTrigger[]

  @@index([createdById])
  @@map("option_rules")
}

model OptionRuleTarget {
  ruleId      String
  optionId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  rule   OptionRule   @relation(fields: [ruleId], references: [id])
  option OptionHeader @relation(fields: [optionId], references: [id])

  @@id([ruleId, optionId])
  @@index([createdById])
  @@map("option_rule_targets")
}

model OptionRuleTrigger {
  ruleId      String
  optionId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  rule   OptionRule   @relation(fields: [ruleId], references: [id])
  option OptionHeader @relation(fields: [optionId], references: [id])

  @@id([ruleId, optionId])
  @@index([createdById])
  @@map("option_rule_triggers")
}

model Configuration {
  id             String    @id @default(uuid())
  productClassId String
  name           String
  description    String?
  isTemplate     Boolean
  isActive       Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  createdById    String
  updatedById    String

  productClass    ProductClass          @relation(fields: [productClassId], references: [id])
  selectedOptions ConfigurationOption[]
  quoteItems      QuoteItem[]

  @@index([createdById])
  @@map("configurations")
}

model ConfigurationOption {
  configurationId String
  optionId        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  createdById     String
  updatedById     String

  configuration Configuration @relation(fields: [configurationId], references: [id])
  option        OptionHeader  @relation(fields: [optionId], references: [id])

  @@id([configurationId, optionId])
  @@index([createdById])
  @@map("configuration_options")
}

// CUSTOMER JOURNEY MODELS
model Address {
  id           String    @id @default(uuid())
  companyId    String
  addressLine1 String
  addressLine2 String?
  city         String?
  state        String?
  zip          String?
  country      String?
  isPrimary    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  createdById  String
  updatedById  String

  company          Company   @relation(fields: [companyId], references: [id])
  customerJourneys Journey[] @relation("JourneyCustomerAddress")
  dealerJourneys   Journey[] @relation("JourneyDealerAddress")

  @@index([createdById])
  @@map("addresses")
}

model Company {
  id            String        @id @default(uuid())
  name          String
  website       String?
  email         String?
  phone         String?
  fax           String?
  industry      Industry?
  yearFounded   Int?
  revenue       Int?
  employeeCount String?
  customerSince DateTime?
  paymentTerms  String?
  creditLimit   Int?
  taxId         String?
  logoUrl       String?
  notes         String?
  tags          String[]
  status        CompanyStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  createdById   String
  updatedById   String

  createdBy        Employee? @relation("CustomerCreatedBy", fields: [createdById], references: [id])
  addresses        Address[]
  contacts         Contact[]
  customerJourneys Journey[] @relation("CustomerJourneys")
  dealerJourneys   Journey[] @relation("DealerJourneys")

  @@index([createdById])
  @@map("companies")
}

model Contact {
  id          String    @id @default(uuid())
  companyId   String
  firstName   String
  lastName    String?
  email       String?
  phone       String?
  title       String?
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  company          Company   @relation(fields: [companyId], references: [id])
  customerJourneys Journey[] @relation("JourneyCustomerContact")
  dealerJourneys   Journey[] @relation("JourneyDealerContact")

  @@index([createdById])
  @@map("contacts")
}

model Journey {
  id                String           @id @default(uuid())
  name              String?
  rsmId             String?
  customerId        String?
  customerAddressId String?
  customerContactId String?
  dealerId          String?
  dealerAddressId   String?
  dealerContactId   String?
  startDate         DateTime?
  status            JourneyStatus?
  type              JourneyType?
  source            JourneySource?
  priority          JourneyPriority?
  confidence        Int?
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  createdById       String
  updatedById       String

  rsm             Employee?            @relation("RsmJourneys", fields: [rsmId], references: [id])
  customer        Company?             @relation("CustomerJourneys", fields: [customerId], references: [id])
  customerAddress Address?             @relation("JourneyCustomerAddress", fields: [customerAddressId], references: [id])
  customerContact Contact?             @relation("JourneyCustomerContact", fields: [customerContactId], references: [id])
  dealer          Company?             @relation("DealerJourneys", fields: [dealerId], references: [id])
  dealerAddress   Address?             @relation("JourneyDealerAddress", fields: [dealerAddressId], references: [id])
  dealerContact   Contact?             @relation("JourneyDealerContact", fields: [dealerContactId], references: [id])
  createdBy       Employee?            @relation("JourneyCreatedBy", fields: [createdById], references: [id])
  interactions    JourneyInteraction[] @relation("JourneyInteractions")
  quotes          Quote[]              @relation("JourneyQuotes")

  @@index([createdById])
  @@map("journeys")
}

model JourneyInteraction {
  id              String                 @id @default(uuid())
  journeyId       String
  interactionType JourneyInteractionType
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  deletedAt       DateTime?
  createdById     String
  updatedById     String

  journey Journey @relation("JourneyInteractions", fields: [journeyId], references: [id])

  @@index([createdById])
  @@map("journey_interactions")
}

// QUOTE MODELS
model Item {
  id          String    @id @default(uuid())
  name        String
  description String?
  unitPrice   Float     @default(0)
  type        String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  quoteItems QuoteItem[]

  @@index([createdById])
  @@map("items")
}

model Quote {
  id           String      @id @default(uuid())
  journeyId    String?
  year         Int
  number       String
  revision     String
  status       QuoteStatus
  ownerId      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  approvedAt   DateTime?
  deletedAt    DateTime?
  createdById  String
  updatedById  String
  approvedById String?

  journey    Journey?    @relation("JourneyQuotes", fields: [journeyId], references: [id])
  owner      Employee?   @relation("QuoteOwnedBy", fields: [ownerId], references: [id])
  createdBy  Employee?   @relation("QuoteCreatedBy", fields: [createdById], references: [id])
  approvedBy Employee?   @relation("QuoteApprovedBy", fields: [approvedById], references: [id])
  items      QuoteItem[] @relation("QuoteItems")

  @@unique([number, revision])
  @@index([createdById])
  @@index([approvedById])
  @@map("quotes")
}

model QuoteItem {
  id              String    @id @default(uuid())
  quoteId         String
  configurationId String?
  itemId          String?
  quantity        Int
  unitPrice       Decimal
  totalPrice      Decimal
  lineNumber      Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  createdById     String
  updatedById     String

  quote         Quote          @relation("QuoteItems", fields: [quoteId], references: [id])
  configuration Configuration? @relation(fields: [configurationId], references: [id])
  item          Item?          @relation(fields: [itemId], references: [id])

  @@index([createdById])
  @@map("quote_items")
}

model PerformanceSheetVersion {
  id          String    @id @default(uuid())
  sections    Json      @default("[]")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  performanceSheets PerformanceSheet[]

  @@index([createdById])
  @@map("performance_sheet_versions")
}

model PerformanceSheet {
  id          String    @id @default(uuid())
  versionId   String
  name        String?
  data        Json      @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  version PerformanceSheetVersion @relation(fields: [versionId], references: [id])
  links   PerformanceSheetLink[]

  @@index([createdById])
  @@map("performance_sheets")
}

model PerformanceSheetLink {
  id                 String    @id @default(uuid())
  performanceSheetId String
  entityType         String
  entityId           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  createdById        String
  updatedById        String

  performanceSheet PerformanceSheet @relation(fields: [performanceSheetId], references: [id])

  @@index([createdById])
  @@map("performance_sheet_links")
}

model FieldsToWatch {
  id          String    @id @default(uuid())
  entityType  String
  fields      Json      @default("[]")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  @@index([createdById])
  @@map("fields_to_watch")
}

model AuditLog {
  id         String      @id @default(cuid())
  action     AuditAction
  entityType String
  entityId   String
  changedBy  String
  changes    Json
  createdAt  DateTime    @default(now())

  @@map("audit_logs")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  SOFT_DELETE
  RESTORE
}

// MACHINE MODELS
model Machine {
  id              String                @id @default(uuid())
  slug            String                @unique
  name            String
  type            MachineType
  controllerType  MachineControllerType
  controllerModel String?
  connectionType  MachineConnectionType
  connectionHost  String?
  connectionPort  Int?
  connectionUrl   String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  deletedAt       DateTime?
  createdById     String
  updatedById     String

  statuses MachineStatus[]

  @@index([createdById])
  @@map("machines")
}

model MachineStatus {
  id           String       @id @default(uuid())
  machineId    String
  state        MachineState
  execution    String
  controller   String
  program      String
  tool         String
  metrics      Json
  alarmCode    String
  alarmMessage String
  startTime    DateTime
  endTime      DateTime?
  duration     Int
  createdAt    DateTime     @default(now())

  machine Machine @relation(fields: [machineId], references: [id])

  @@map("machine_statuses")
}

model Draft {
  id          String   @id @default(uuid())
  entityType  String
  entityId    String?
  data        Json
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([entityType, entityId])
  @@index([createdById])
  @@map("drafts")
}

// ENUMS
enum CompanyStatus {
  ACTIVE
  INACTIVE
  SANDBOX
  ARCHIVE
}

enum Industry {
  AUTOMOTIVE
  CONSTRUCTION
  MANUFACTURING
  OTHER
}

enum JourneyInteractionType {
  EMAIL
  PHONE
  IN_PERSON
  VIDEO_CALL
  TEXT_MESSAGE
  SOCIAL_MEDIA
  OTHER
}

enum JourneyPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum JourneySource {
  WEBSITE
  SOCIAL_MEDIA
  REFERRAL
  EVENT
  OTHER
}

enum JourneyStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum JourneyType {
  STAMPING
  CTL
  ROLL_FORMING
  UPGRADE
  PARTS
  SERVICE
  RETROFIT
}

enum MachineConnectionType {
  MTCONNECT
  FOCAS
  OTHER
}

enum MachineControllerType {
  MAZAK
  FANUC
  OTHER
}

enum MachineState {
  ACTIVE
  SETUP
  IDLE
  ALARM
  OFFLINE
  UNKNOWN
}

enum MachineType {
  LATHE
  MILL
  GRINDER
  OTHER
}

enum OptionRuleAction {
  DISABLE
  REQUIRE
}

enum QuoteStatus {
  DRAFT
  APPROVED
  SENT
  REVISED
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED
}

enum TimeScale {
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

enum UserRole {
  USER
  ADMIN
}
