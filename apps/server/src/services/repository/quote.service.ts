// This file was generated by generate-services.ts
import type { Quote } from "@prisma/client";

import { BadRequestError } from "@/middleware/error.middleware";
import { prisma } from "@/utils/prisma";

import { BaseService } from "./_base.service";

type QuoteAttributes = Omit<Quote, "id" | "createdAt" | "updatedAt">;

export class QuoteService extends BaseService<Quote> {
  protected model = prisma.quote;
  protected entityName = "Quote";
  protected modelName = "quote";

  protected async validate(entity: QuoteAttributes): Promise<void> {
    if (!entity.year)
      throw new BadRequestError("year is required");
    if (!entity.number)
      throw new BadRequestError("number is required");
    if (!entity.priority)
      throw new BadRequestError("priority is required");
    if (!entity.confidence)
      throw new BadRequestError("confidence is required");
    if (!entity.createdById)
      throw new BadRequestError("createdById is required");
    if (!entity.updatedById)
      throw new BadRequestError("updatedById is required");
    if (!entity.legacy)
      throw new BadRequestError("legacy is required");
  }

  protected getTransforms(): Record<string, string> {
    return {
      quoteNumber: "CONCAT(RIGHT(year, 2), '-', LPAD(number, 5, '0'))",
    };
  }

  protected transformSort(sort?: string, order?: "asc" | "desc"): any {
    if (sort === "quoteNumber") {
      return [{ year: order || "asc" }, { number: order || "asc" }];
    }
    return super.transformSort(sort, order);
  }

  protected getSearchFields(): (string | { field: string; weight: number })[] {
    return [{ field: "year", weight: 2 }, { field: "number", weight: 3 }, { field: "quoteNumber", weight: 5 }];
  }
}
