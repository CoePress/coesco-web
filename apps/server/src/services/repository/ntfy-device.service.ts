// This file was generated by generate-services.ts on 2025-08-25 15:10:39
import type { NtfyDevice } from "@prisma/client";

import { BadRequestError } from "@/middleware/error.middleware";
import { prisma } from "@/utils/prisma";

import { BaseService } from "./_base.service";

type NtfyDeviceAttributes = Omit<NtfyDevice, "id" | "createdAt" | "updatedAt">;

export class NtfyDeviceService extends BaseService<NtfyDevice> {
  protected model = prisma.ntfyDevice;
  protected entityName = "NtfyDevice";
  protected modelName = "ntfyDevice";

  protected async validate(entity: NtfyDeviceAttributes): Promise<void> {
    if (!entity.name)
      throw new BadRequestError("name is required");
    if (!entity.host)
      throw new BadRequestError("host is required");
    if (!entity.pingIntervalSec)
      throw new BadRequestError("pingIntervalSec is required");
    if (!entity.maxMissedPings)
      throw new BadRequestError("maxMissedPings is required");
    if (!entity.currentMissedPings)
      throw new BadRequestError("currentMissedPings is required");
    if (!entity.enabled)
      throw new BadRequestError("enabled is required");
    if (!entity.isDown)
      throw new BadRequestError("isDown is required");
    if (!entity.createdById)
      throw new BadRequestError("createdById is required");
    if (!entity.updatedById)
      throw new BadRequestError("updatedById is required");
  }
}
