// This file was generated by generate-services.ts
import { Item } from "@prisma/client";
import { BaseRepository } from "./_base.repository";
import { prisma } from "@/utils/prisma";
import { BadRequestError } from "@/middleware/error.middleware";

type ItemAttributes = Omit<Item, "id" | "createdAt" | "updatedAt">;

export class ItemRepository extends BaseRepository<Item> {
	protected model = prisma.item;
	protected entityName = "Item";
	protected modelName = "item";

	protected async validate(entity: ItemAttributes): Promise<void> {
		if (!entity.specifications) throw new BadRequestError("specifications is required");
		if (!entity.unitPrice) throw new BadRequestError("unitPrice is required");
		if (entity.isActive === undefined || entity.isActive === null) throw new BadRequestError("isActive is required");
		if (!entity.createdById) throw new BadRequestError("createdById is required");
		if (!entity.updatedById) throw new BadRequestError("updatedById is required");
	}

	protected getSearchFields(): (string | { field: string; weight: number })[] {
		return [{ field: "modelNumber", weight: 3 }, { field: "description", weight: 2 }, { field: "type", weight: 1 }];
	}
}