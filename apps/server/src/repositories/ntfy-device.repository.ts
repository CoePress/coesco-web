// This file was generated by generate-services.ts
import type { NtfyDevice } from "@prisma/client";

import { BadRequestError } from "@/middleware/error.middleware";
import { prisma } from "@/utils/prisma";

import { BaseRepository } from "./_base.repository";

type NtfyDeviceAttributes = Omit<NtfyDevice, "id" | "createdAt" | "updatedAt">;

export class NtfyDeviceRepository extends BaseRepository<NtfyDevice> {
  protected model = prisma.ntfyDevice;
  protected entityName = "NtfyDevice";
  protected modelName = "ntfyDevice";

  protected async validate(entity: NtfyDeviceAttributes): Promise<void> {
    if (!entity.name)
      throw new BadRequestError("name is required");
    if (!entity.host)
      throw new BadRequestError("host is required");
    if (!entity.pingIntervalSec)
      throw new BadRequestError("pingIntervalSec is required");
    if (!entity.maxMissedPings)
      throw new BadRequestError("maxMissedPings is required");
    if (!entity.currentMissedPings)
      throw new BadRequestError("currentMissedPings is required");
    if (entity.enabled === undefined || entity.enabled === null)
      throw new BadRequestError("enabled is required");
    if (entity.isDown === undefined || entity.isDown === null)
      throw new BadRequestError("isDown is required");
    if (!entity.createdById)
      throw new BadRequestError("createdById is required");
    if (!entity.updatedById)
      throw new BadRequestError("updatedById is required");
  }
}
