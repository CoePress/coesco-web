// This file was generated by generate-services.ts
import { FormConditionalRule } from "@prisma/client";
import { BaseRepository } from "./_base.repository";
import { prisma } from "@/utils/prisma";
import { BadRequestError } from "@/middleware/error.middleware";

type FormConditionalRuleAttributes = Omit<FormConditionalRule, "id" | "createdAt" | "updatedAt">;

export class FormConditionalRuleRepository extends BaseRepository<FormConditionalRule> {
	protected model = prisma.formConditionalRule;
	protected entityName = "FormConditionalRule";
	protected modelName = "formConditionalRule";

	protected async validate(entity: FormConditionalRuleAttributes): Promise<void> {
		if (!entity.formId) throw new BadRequestError("formId is required");
		if (!entity.targetId) throw new BadRequestError("targetId is required");
		if (!entity.conditions) throw new BadRequestError("conditions is required");
		if (!entity.priority) throw new BadRequestError("priority is required");
		if (entity.isActive === undefined || entity.isActive === null) throw new BadRequestError("isActive is required");
		if (!entity.createdById) throw new BadRequestError("createdById is required");
		if (!entity.updatedById) throw new BadRequestError("updatedById is required");
	}

}