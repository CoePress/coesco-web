// This file was generated by generate-services.ts
import type { Session } from "@prisma/client";

import { BadRequestError } from "@/middleware/error.middleware";
import { prisma } from "@/utils/prisma";

import { BaseRepository } from "./_base.repository";

type SessionAttributes = Omit<Session, "id" | "createdAt" | "updatedAt">;

export class SessionRepository extends BaseRepository<Session> {
  protected model = prisma.session;
  protected entityName = "Session";
  protected modelName = "session";

  protected async validate(entity: SessionAttributes): Promise<void> {
    if (!entity.userId)
      throw new BadRequestError("userId is required");
    if (!entity.token)
      throw new BadRequestError("token is required");
    if (!entity.loginAt)
      throw new BadRequestError("loginAt is required");
    if (!entity.lastActivityAt)
      throw new BadRequestError("lastActivityAt is required");
    if (!entity.expiresAt)
      throw new BadRequestError("expiresAt is required");
    if (entity.isActive === undefined || entity.isActive === null)
      throw new BadRequestError("isActive is required");
    if (entity.isSuspicious === undefined || entity.isSuspicious === null)
      throw new BadRequestError("isSuspicious is required");
  }
}
