// This file was generated by generate-services.ts
import type { FormField } from "@prisma/client";

import { BadRequestError } from "@/middleware/error.middleware";
import { prisma } from "@/utils/prisma";

import { BaseRepository } from "./_base.repository";

type FormFieldAttributes = Omit<FormField, "id" | "createdAt" | "updatedAt">;

export class FormFieldRepository extends BaseRepository<FormField> {
  protected model = prisma.formField;
  protected entityName = "FormField";
  protected modelName = "formField";

  protected async validate(entity: FormFieldAttributes): Promise<void> {
    if (!entity.sectionId)
      throw new BadRequestError("sectionId is required");
    if (!entity.label)
      throw new BadRequestError("label is required");
    if (!entity.variable)
      throw new BadRequestError("variable is required");
    if (!entity.options)
      throw new BadRequestError("options is required");
    if (!entity.isRequired)
      throw new BadRequestError("isRequired is required");
    if (!entity.isReadOnly)
      throw new BadRequestError("isReadOnly is required");
    if (!entity.isHiddenOnDevice)
      throw new BadRequestError("isHiddenOnDevice is required");
    if (!entity.isHiddenOnReport)
      throw new BadRequestError("isHiddenOnReport is required");
    if (!entity.sequence)
      throw new BadRequestError("sequence is required");
    if (!entity.createdById)
      throw new BadRequestError("createdById is required");
    if (!entity.updatedById)
      throw new BadRequestError("updatedById is required");
  }
}
