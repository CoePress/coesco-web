generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String?
  microsoftId String?   @unique
  role        UserRole  @default(USER)
  isActive    Boolean   @default(false)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employee Employee?

  @@map("users")
}

model Employee {
  id          String    @id @default(uuid())
  userId      String    @unique
  number      String    @unique
  firstName   String
  lastName    String
  email       String?   @unique
  phoneNumber String?
  isActive    Boolean   @default(true)
  hireDate    DateTime?
  jobTitle    String
  initials    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  user             User      @relation(fields: [userId], references: [id])
  journeys         Journey[] @relation("RsmJourneys")
  createdCompanies Company[] @relation("CustomerCreatedBy")
  createdJourneys  Journey[] @relation("JourneyCreatedBy")
  createdQuotes    Quote[]   @relation("QuoteCreatedBy")
  approvedQuotes   Quote[]   @relation("QuoteApprovedBy")
  ownedQuotes      Quote[]   @relation("QuoteOwnedBy")

  @@index([number])
  @@index([createdById])
  @@map("employees")
}

model PerformanceSheetVersion {
  id          String    @id @default(uuid())
  sections    Json      @default("[]")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  performanceSheets PerformanceSheet[]

  @@index([createdById])
  @@map("performance_sheet_versions")
}

model PerformanceSheet {
  id          String    @id @default(uuid())
  versionId   String
  name        String?
  data        Json      @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  createdById String
  updatedById String

  version PerformanceSheetVersion @relation(fields: [versionId], references: [id])
  links   PerformanceSheetLink[]

  @@index([createdById])
  @@map("performance_sheets")
}

model PerformanceSheetLink {
  id                 String    @id @default(uuid())
  performanceSheetId String
  entityType         String
  entityId           String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  createdById        String
  updatedById        String

  performanceSheet PerformanceSheet @relation(fields: [performanceSheetId], references: [id])

  @@index([createdById])
  @@map("performance_sheet_links")
}

model AuditLog {
  id        String      @id @default(uuid())
  action    AuditAction
  model     String
  recordId  String
  changedBy String
  diff      Json
  createdAt DateTime    @default(now())

  @@index([model])
  @@index([recordId])
  @@index([changedBy])
  @@index([createdAt])
  @@map("audit_logs")
}

model Draft {
  id          String   @id @default(uuid())
  entityType  String
  entityId    String?
  data        Json
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([entityType, entityId])
  @@index([createdById])
  @@map("drafts")
}