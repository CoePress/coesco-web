generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  USER
  ADMIN
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String?
  microsoftId String?
  userType    UserType @default(USER)
  employeeId  String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  employee Employee? @relation(fields: [employeeId], references: [id])

  @@map("users")
}

model Employee {
  id          String    @id @default(uuid())
  number      String    @unique
  firstName   String
  lastName    String
  initials    String?
  email       String?   @unique
  phoneNumber String?
  hireDate    DateTime?
  jobTitle    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user                User?
  journeys            Journey[]     @relation("RsmJourneys")
  createdJourneys     Journey[]     @relation("JourneyCreatedBy")
  createdJourneyNotes JourneyNote[] @relation("JourneyNoteCreatedBy")
  changeLogs          ChangeLog[]
  createdQuotes       Quote[]       @relation("QuoteCreatedBy")
  approvedQuotes      Quote[]       @relation("QuoteApprovedBy")

  @@index([number])
  @@map("employees")
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  STAGING
  PROCESSED
}

enum Industry {
  AUTOMOTIVE
  CONSTRUCTION
  MANUFACTURING
  OTHER
}

model Company {
  id            String        @id @default(uuid())
  name          String
  website       String?
  email         String?
  phone         String?
  fax           String?
  industry      Industry?
  yearFounded   Int?
  revenue       Int?
  employeeCount String?
  customerSince DateTime?
  paymentTerms  String?
  creditLimit   Int?
  taxId         String?
  logoUrl       String?
  notes         String?
  status        CompanyStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  addresses        Address[]
  contacts         Contact[]
  customerJourneys Journey[] @relation("CustomerJourneys")
  dealerJourneys   Journey[] @relation("DealerJourneys")

  @@map("companies")
}

model Address {
  id           String   @id @default(uuid())
  companyId    String
  addressLine1 String
  addressLine2 String?
  city         String?
  state        String?
  zip          String?
  country      String?
  isPrimary    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])

  @@map("addresses")
}

model Contact {
  id        String   @id @default(uuid())
  companyId String
  firstName String
  lastName  String?
  email     String?
  phone     String?
  title     String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])

  @@map("contacts")
}

model Journey {
  id          String    @id @default(uuid())
  name        String?
  rsmId       String?
  customerId  String?
  dealerId    String?
  priority    String
  confidence  Int
  leadSource  String?
  startDate   DateTime?
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  rsm          Employee?            @relation("RsmJourneys", fields: [rsmId], references: [id])
  customer     Company?             @relation("CustomerJourneys", fields: [customerId], references: [id])
  dealer       Company?             @relation("DealerJourneys", fields: [dealerId], references: [id])
  createdBy    Employee?            @relation("JourneyCreatedBy", fields: [createdById], references: [id])
  interactions JourneyInteraction[] @relation("JourneyInteractions")
  notes        JourneyNote[]        @relation("JourneyNotes")
  quotes       Quote[]              @relation("JourneyQuotes")

  @@map("journeys")
}

enum JourneyInteractionType {
  EMAIL
  PHONE
  IN_PERSON
  VIDEO_CALL
  TEXT_MESSAGE
  SOCIAL_MEDIA
  OTHER
}

model JourneyInteraction {
  id              String                 @id @default(uuid())
  journeyId       String
  interactionType JourneyInteractionType
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  journey Journey @relation("JourneyInteractions", fields: [journeyId], references: [id])

  @@map("journey_interactions")
}

model JourneyNote {
  id          String   @id @default(uuid())
  journeyId   String
  note        String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  journey   Journey   @relation("JourneyNotes", fields: [journeyId], references: [id])
  createdBy Employee? @relation("JourneyNoteCreatedBy", fields: [createdById], references: [id])

  @@map("journey_notes")
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED
}

model Quote {
  id           String      @id @default(uuid())
  journeyId    String
  year         Int
  number       String
  revision     String
  subtotal     Decimal
  taxAmount    Decimal?
  totalAmount  Decimal
  currency     String
  status       QuoteStatus
  notes        String?
  createdById  String
  approvedById String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  journey    Journey     @relation("JourneyQuotes", fields: [journeyId], references: [id])
  createdBy  Employee?   @relation("QuoteCreatedBy", fields: [createdById], references: [id])
  approvedBy Employee?   @relation("QuoteApprovedBy", fields: [approvedById], references: [id])
  items      QuoteItem[] @relation("QuoteItems")

  @@unique([year, number, revision])
  @@index([year, number, revision])
  @@map("quotes")
}

model QuoteItem {
  id              String   @id @default(uuid())
  quoteId         String
  configurationId String?
  itemId          String?
  quantity        Int
  unitPrice       Decimal
  totalPrice      Decimal
  lineNumber      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  quote         Quote          @relation("QuoteItems", fields: [quoteId], references: [id])
  configuration Configuration? @relation(fields: [configurationId], references: [id])
  item          Item?          @relation(fields: [itemId], references: [id])

  @@map("quote_items")
}

model ProductClass {
  id          String   @id @default(uuid())
  name        String
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent                       ProductClass?                @relation("ProductClassHierarchy", fields: [parentId], references: [id])
  children                     ProductClass[]               @relation("ProductClassHierarchy")
  configurations               Configuration[]
  productClassOptionCategories ProductClassOptionCategory[]

  @@map("product_classes")
}

model ProductClassOptionCategory {
  productClassId   String
  optionCategoryId String

  productClass   ProductClass   @relation(fields: [productClassId], references: [id], onDelete: Cascade)
  optionCategory OptionCategory @relation(fields: [optionCategoryId], references: [id], onDelete: Cascade)

  @@id([productClassId, optionCategoryId])
  @@map("product_class_option_categories")
}

model OptionCategory {
  id            String   @id @default(uuid())
  name          String
  description   String?
  isRequired    Boolean
  allowMultiple Boolean
  displayOrder  Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  options Option[]

  productClassOptionCategories ProductClassOptionCategory[]

  @@map("option_categories")
}

model Option {
  id           String   @id @default(uuid())
  categoryId   String
  name         String
  code         String
  description  String?
  price        Decimal
  displayOrder Int      @default(0)
  isDefault    Boolean  @default(false)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category       OptionCategory        @relation(fields: [categoryId], references: [id])
  triggerRules   OptionRule[]          @relation("TriggerOption")
  targetRules    OptionRule[]          @relation("TargetOption")
  configurations ConfigurationOption[]

  @@map("options")
}

model OptionRule {
  id              String   @id @default(uuid())
  ruleType        String
  triggerOptionId String
  targetOptionId  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  triggerOption Option @relation("TriggerOption", fields: [triggerOptionId], references: [id])
  targetOption  Option @relation("TargetOption", fields: [targetOptionId], references: [id])

  @@map("option_rules")
}

model Item {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quoteItems QuoteItem[]

  @@map("items")
}

model Configuration {
  id             String   @id @default(uuid())
  productClassId String
  name           String
  description    String?
  isTemplate     Boolean
  isActive       Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  productClass    ProductClass          @relation(fields: [productClassId], references: [id])
  selectedOptions ConfigurationOption[]
  quoteItems      QuoteItem[]

  @@map("configurations")
}

model ConfigurationOption {
  configurationId String
  optionId        String

  configuration Configuration @relation(fields: [configurationId], references: [id])
  option        Option        @relation(fields: [optionId], references: [id])

  @@id([configurationId, optionId])
  @@map("configuration_options")
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
}

model ChangeLog {
  id         String     @id @default(uuid())
  employeeId String?
  actionType ActionType
  entityType String
  entityId   String
  fieldName  String
  oldValue   String
  newValue   String
  timestamp  DateTime   @default(now())

  employee Employee? @relation(fields: [employeeId], references: [id])

  @@map("change_logs")
}
