generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String?
  microsoftId String?   @unique
  role        UserRole  @default(USER)
  isActive    Boolean   @default(false)
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  employee Employee?

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model Employee {
  id          String    @id @default(uuid())
  userId      String    @unique
  number      String    @unique
  firstName   String
  lastName    String
  email       String?   @unique
  phoneNumber String?
  isActive    Boolean   @default(true)
  hireDate    DateTime?
  jobTitle    String
  initials    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             User      @relation(fields: [userId], references: [id])
  journeys         Journey[] @relation("RsmJourneys")
  createdCompanies Company[] @relation("CustomerCreatedBy")
  createdJourneys  Journey[] @relation("JourneyCreatedBy")
  createdQuotes    Quote[]   @relation("QuoteCreatedBy")
  approvedQuotes   Quote[]   @relation("QuoteApprovedBy")

  @@index([number])
  @@map("employees")
}

model Company {
  id            String        @id @default(uuid())
  name          String
  website       String?
  email         String?
  phone         String?
  fax           String?
  industry      Industry?
  yearFounded   Int?
  revenue       Int?
  employeeCount String?
  customerSince DateTime?
  paymentTerms  String?
  creditLimit   Int?
  taxId         String?
  logoUrl       String?
  notes         String?
  status        CompanyStatus @default(ACTIVE)
  createdById   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  createdBy        Employee? @relation("CustomerCreatedBy", fields: [createdById], references: [id])
  addresses        Address[]
  contacts         Contact[]
  customerJourneys Journey[] @relation("CustomerJourneys")
  dealerJourneys   Journey[] @relation("DealerJourneys")

  @@map("companies")
}

model Address {
  id           String   @id @default(uuid())
  companyId    String
  addressLine1 String
  addressLine2 String?
  city         String?
  state        String?
  zip          String?
  country      String?
  isPrimary    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company          Company   @relation(fields: [companyId], references: [id])
  customerJourneys Journey[] @relation("JourneyCustomerAddress")
  dealerJourneys   Journey[] @relation("JourneyDealerAddress")

  @@map("addresses")
}

model Contact {
  id        String   @id @default(uuid())
  companyId String
  firstName String
  lastName  String?
  email     String?
  phone     String?
  title     String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company          Company   @relation(fields: [companyId], references: [id])
  customerJourneys Journey[] @relation("JourneyCustomerContact")
  dealerJourneys   Journey[] @relation("JourneyDealerContact")

  @@map("contacts")
}

model Journey {
  id                String           @id @default(uuid())
  name              String?
  rsmId             String?
  customerId        String?
  customerAddressId String?
  customerContactId String?
  dealerId          String?
  dealerAddressId   String?
  dealerContactId   String?
  startDate         DateTime?
  status            JourneyStatus?
  type              JourneyType?
  source            JourneySource?
  priority          JourneyPriority?
  confidence        Int?
  notes             String?
  createdById       String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  rsm             Employee?            @relation("RsmJourneys", fields: [rsmId], references: [id])
  customer        Company?             @relation("CustomerJourneys", fields: [customerId], references: [id])
  customerAddress Address?             @relation("JourneyCustomerAddress", fields: [customerAddressId], references: [id])
  customerContact Contact?             @relation("JourneyCustomerContact", fields: [customerContactId], references: [id])
  dealer          Company?             @relation("DealerJourneys", fields: [dealerId], references: [id])
  dealerAddress   Address?             @relation("JourneyDealerAddress", fields: [dealerAddressId], references: [id])
  dealerContact   Contact?             @relation("JourneyDealerContact", fields: [dealerContactId], references: [id])
  createdBy       Employee?            @relation("JourneyCreatedBy", fields: [createdById], references: [id])
  interactions    JourneyInteraction[] @relation("JourneyInteractions")
  quotes          Quote[]              @relation("JourneyQuotes")

  @@map("journeys")
}

model JourneyInteraction {
  id              String                 @id @default(uuid())
  journeyId       String
  interactionType JourneyInteractionType
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  journey Journey @relation("JourneyInteractions", fields: [journeyId], references: [id])

  @@map("journey_interactions")
}

model Quote {
  id           String      @id @default(uuid())
  journeyId    String?
  year         Int
  number       String
  revision     String
  subtotal     Decimal
  taxAmount    Decimal?
  totalAmount  Decimal
  currency     String
  status       QuoteStatus
  createdById  String
  approvedById String?
  approvedAt   DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  journey    Journey?    @relation("JourneyQuotes", fields: [journeyId], references: [id])
  createdBy  Employee?   @relation("QuoteCreatedBy", fields: [createdById], references: [id])
  approvedBy Employee?   @relation("QuoteApprovedBy", fields: [approvedById], references: [id])
  items      QuoteItem[] @relation("QuoteItems")

  @@unique([number, revision])
  @@map("quotes")
}

model QuoteItem {
  id              String   @id @default(uuid())
  quoteId         String
  configurationId String?
  itemId          String?
  quantity        Int      @default(1)
  unitPrice       Decimal  @default(0)
  totalPrice      Decimal  @default(0)
  lineNumber      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  quote         Quote          @relation("QuoteItems", fields: [quoteId], references: [id])
  configuration Configuration? @relation(fields: [configurationId], references: [id])
  item          Item?          @relation(fields: [itemId], references: [id])

  @@map("quote_items")
}

model ProductClass {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?
  parentId    String?
  depth       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent                       ProductClass?                @relation("ProductClassHierarchy", fields: [parentId], references: [id])
  children                     ProductClass[]               @relation("ProductClassHierarchy")
  configurations               Configuration[]
  productClassOptionCategories ProductClassOptionCategory[]

  @@map("product_classes")
}

model ProductClassOptionCategory {
  productClassId   String
  optionCategoryId String

  productClass   ProductClass   @relation(fields: [productClassId], references: [id], onDelete: Cascade)
  optionCategory OptionCategory @relation(fields: [optionCategoryId], references: [id], onDelete: Cascade)

  @@id([productClassId, optionCategoryId])
  @@map("product_class_option_categories")
}

model OptionCategory {
  id            String   @id @default(uuid())
  name          String
  description   String?
  isRequired    Boolean
  allowMultiple Boolean
  displayOrder  Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  options Option[]

  productClassOptionCategories ProductClassOptionCategory[]

  @@map("option_categories")
}

model Option {
  id           String   @id @default(uuid())
  categoryId   String
  name         String
  code         String
  description  String?
  price        Decimal
  displayOrder Int      @default(0)
  isDefault    Boolean  @default(false)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category       OptionCategory        @relation(fields: [categoryId], references: [id])
  triggerRules   OptionRule[]          @relation("TriggerOption")
  targetRules    OptionRule[]          @relation("TargetOption")
  configurations ConfigurationOption[]

  @@map("options")
}

model OptionRule {
  id              String   @id @default(uuid())
  ruleType        String
  triggerOptionId String
  targetOptionId  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  triggerOption Option @relation("TriggerOption", fields: [triggerOptionId], references: [id])
  targetOption  Option @relation("TargetOption", fields: [targetOptionId], references: [id])

  @@map("option_rules")
}

model Item {
  id          String   @id @default(uuid())
  name        String
  description String?
  unitPrice   Float    @default(0)
  isActive    Boolean  @default(true)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quoteItems QuoteItem[]

  @@map("items")
}

model Configuration {
  id             String   @id @default(uuid())
  productClassId String
  name           String
  description    String?
  isTemplate     Boolean
  isActive       Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  productClass    ProductClass          @relation(fields: [productClassId], references: [id])
  selectedOptions ConfigurationOption[]
  quoteItems      QuoteItem[]

  @@map("configurations")
}

model ConfigurationOption {
  configurationId String
  optionId        String

  configuration Configuration @relation(fields: [configurationId], references: [id])
  option        Option        @relation(fields: [optionId], references: [id])

  @@id([configurationId, optionId])
  @@map("configuration_options")
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
}

model Machine {
  id              String                @id @default(uuid())
  slug            String                @unique
  name            String
  type            MachineType
  controllerType  MachineControllerType
  controllerModel String?
  connectionType  MachineConnectionType
  connectionHost  String?
  connectionPort  Int?
  connectionUrl   String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  statuses MachineStatus[]

  @@map("machines")
}

model MachineStatus {
  id           String       @id @default(uuid())
  machineId    String
  state        MachineState
  execution    String
  controller   String
  program      String
  tool         String
  metrics      Json
  alarmCode    String
  alarmMessage String
  startTime    DateTime
  endTime      DateTime?
  duration     Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  machine Machine @relation(fields: [machineId], references: [id])

  @@map("machine_statuses")
}

enum MachineType {
  LATHE
  MILL
  GRINDER
  OTHER
}

enum MachineControllerType {
  MAZAK
  FANUC
  OTHER
}

enum MachineConnectionType {
  MTCONNECT
  FOCAS
  OTHER
}

enum MachineState {
  ACTIVE
  SETUP
  IDLE
  ALARM
  OFFLINE
  UNKNOWN
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  SANDBOX
  ARCHIVE
}

enum Industry {
  AUTOMOTIVE
  CONSTRUCTION
  MANUFACTURING
  OTHER
}

enum JourneyStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  CANCELLED
}

enum JourneyType {
  STAMPING
  CTL
  ROLL_FORMING
  UPGRADE
  PARTS
  SERVICE
  RETROFIT
}

enum JourneySource {
  WEBSITE
  SOCIAL_MEDIA
  REFERRAL
  EVENT
  OTHER
}

enum JourneyPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum JourneyInteractionType {
  EMAIL
  PHONE
  IN_PERSON
  VIDEO_CALL
  TEXT_MESSAGE
  SOCIAL_MEDIA
  OTHER
}

enum QuoteStatus {
  DRAFT
  APPROVED
  SENT
  REVISED
  ACCEPTED
  REJECTED
  CANCELLED
  EXPIRED
}

enum TimeScale {
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}
