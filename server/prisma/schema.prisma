generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id          String    @id @default(uuid())
  number      String    @unique
  firstName   String
  lastName    String
  email       String?
  phoneNumber String?
  hireDate    DateTime?
  jobTitle    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  journeys Journey[] @relation("RsmJourneys")
  createdJourneys Journey[] @relation("JourneyCreatedBy")
  createdJourneyNotes JourneyNote[] @relation("JourneyNoteCreatedBy")

  // rsmQuotes         Quote[]         @relation("QuoteRsm")
  // createdQuotes     Quote[]         @relation("QuoteCreator")
  // createdRevisions  QuoteRevision[] @relation("RevisionCreator")
  // approvedRevisions QuoteRevision[] @relation("RevisionApprover")
  // changesMade       ChangeLog[]

  @@index([number])
  @@map("employees")
}

enum CompanyStatus {
  ACTIVE
  INACTIVE
  STAGING
  PROCESSED
}

model Company {
  id          String        @id @default(uuid())
  name        String
  website     String?
  phoneNumber String?
  email       String?
  notes       String?
  status      CompanyStatus
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  addresses        Address[] @relation("CompanyAddresses")
  contacts         Contact[] @relation("CompanyContacts")
  customerJourneys Journey[] @relation("CustomerJourneys")
  dealerJourneys   Journey[] @relation("DealerJourneys")

  @@map("companies")
}

model Address {
  id           String   @id @default(uuid())
  companyId    String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  zip          String
  country      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company Company @relation("CompanyAddresses", fields: [companyId], references: [id])

  @@map("addresses")
}

model Contact {
  id        String   @id @default(uuid())
  companyId String
  firstName String
  lastName  String
  email     String
  phone     String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation("CompanyContacts", fields: [companyId], references: [id])

  @@map("contacts")
}

model Journey {
  id         String   @id @default(uuid())
  rsmId      String?
  customerId String?
  dealerId   String?
  createdById String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  rsm          Employee?            @relation("RsmJourneys", fields: [rsmId], references: [id])
  customer     Company?             @relation("CustomerJourneys", fields: [customerId], references: [id])
  dealer       Company?             @relation("DealerJourneys", fields: [dealerId], references: [id])
  createdBy    Employee?            @relation("JourneyCreatedBy", fields: [createdById], references: [id])
  interactions JourneyInteraction[] @relation("JourneyInteractions")
  notes        JourneyNote[]        @relation("JourneyNotes")
  quotes       Quote[]              @relation("JourneyQuotes")

  @@map("journeys")
}

enum JourneyInteractionType {
  EMAIL
  PHONE
  IN_PERSON
  VIDEO_CALL
  TEXT_MESSAGE
  SOCIAL_MEDIA
  OTHER
}

model JourneyInteraction {
  id              String                 @id @default(uuid())
  journeyId       String
  interactionType JourneyInteractionType
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  journey Journey @relation("JourneyInteractions", fields: [journeyId], references: [id])

  @@map("journey_interactions")
}

model JourneyNote {
  id        String   @id @default(uuid())
  journeyId String
  note      String
  createdById String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  journey Journey @relation("JourneyNotes", fields: [journeyId], references: [id])
  createdBy Employee? @relation("JourneyNoteCreatedBy", fields: [createdById], references: [id])

  @@map("journey_notes")
}

enum QuoteStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
}

model Quote {
  id        String      @id @default(uuid())
  journeyId String
  year      Int
  number    String
  revision  String
  status    QuoteStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  journey Journey     @relation("JourneyQuotes", fields: [journeyId], references: [id])
  items   QuoteItem[] @relation("QuoteItems")

  @@index([year, number, revision])
  @@map("quotes")
}

model QuoteItem {
  id              String   @id @default(uuid())
  quoteId         String
  configurationId String?
  itemId          String?
  quantity        Int
  unitPrice       Decimal
  totalPrice      Decimal
  lineNumber      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  quote         Quote          @relation("QuoteItems", fields: [quoteId], references: [id])
  configuration Configuration? @relation(fields: [configurationId], references: [id])
  item          Item?          @relation(fields: [itemId], references: [id])

  @@map("quote_items")
}

model ProductClass {
  id          String   @id @default(uuid())
  name        String
  description String?
  parentId    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  parent                       ProductClass?                @relation("ProductClassHierarchy", fields: [parentId], references: [id])
  children                     ProductClass[]               @relation("ProductClassHierarchy")
  configurations               Configuration[]
  productClassOptionCategories ProductClassOptionCategory[]

  @@map("product_classes")
}

model ProductClassOptionCategory {
  productClassId   String
  optionCategoryId String

  productClass   ProductClass   @relation(fields: [productClassId], references: [id], onDelete: Cascade)
  optionCategory OptionCategory @relation(fields: [optionCategoryId], references: [id], onDelete: Cascade)

  @@id([productClassId, optionCategoryId])
  @@map("product_class_option_categories")
}

model OptionCategory {
  id            String   @id @default(uuid())
  name          String
  description   String?
  isRequired    Boolean
  allowMultiple Boolean
  displayOrder  Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  options Option[]

  productClassOptionCategories ProductClassOptionCategory[]

  @@map("option_categories")
}

model Option {
  id           String   @id @default(uuid())
  categoryId   String
  name         String
  code         String
  description  String?
  price        Decimal
  displayOrder Int      @default(0)
  isDefault    Boolean  @default(false)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  category       OptionCategory        @relation(fields: [categoryId], references: [id])
  triggerRules   OptionRule[]          @relation("TriggerOption")
  targetRules    OptionRule[]          @relation("TargetOption")
  configurations ConfigurationOption[]

  @@map("options")
}

model OptionRule {
  id              String   @id @default(uuid())
  ruleType        String
  triggerOptionId String
  targetOptionId  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  triggerOption Option @relation("TriggerOption", fields: [triggerOptionId], references: [id])
  targetOption  Option @relation("TargetOption", fields: [targetOptionId], references: [id])

  @@map("option_rules")
}

model Item {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quoteItems QuoteItem[]

  @@map("items")
}

model Configuration {
  id             String   @id @default(uuid())
  productClassId String
  name           String
  description    String?
  isTemplate     Boolean
  isActive       Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  productClass    ProductClass          @relation(fields: [productClassId], references: [id])
  selectedOptions ConfigurationOption[]
  quoteItems      QuoteItem[]

  @@map("configurations")
}

model ConfigurationOption {
  configurationId String
  optionId        String

  configuration Configuration @relation(fields: [configurationId], references: [id])
  option        Option        @relation(fields: [optionId], references: [id])

  @@id([configurationId, optionId])
  @@map("configuration_options")
}
