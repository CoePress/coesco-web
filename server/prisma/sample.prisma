

// All quotes where Alice is the RSM
// const myPipeline = await prisma.employee.findUnique({
//   where: { id: aliceId },
//   include: { rsmQuotes: true },
// });

// All revisions Bob approved
// const approvals = await prisma.employee.findUnique({
//   where: { id: bobId },
//   include: { approvedRevisions: true },
// });

// enum QuoteStatus {
//   OPEN
//   WON
//   LOST
//   CANCELLED
// }

// model Quote {
//   id                String      @id @default(uuid())
//   year              String 
//   number            String
//   status            QuoteStatus
//   priority          String
//   confidence        Int         @default(0)
//   rsmId             String
//   customerId        String
//   customerAddressId String?
//   customerContactId String?
//   dealerId          String
//   dealerAddressId   String?
//   dealerContactId   String?
//   notes             String?
//   createdById       String
//   createdAt         DateTime    @default(now())
//   updatedAt         DateTime    @updatedAt

//   rsm             Employee        @relation("QuoteRsm", fields: [rsmId], references: [id])
//   customer        Customer        @relation(fields: [customerId], references: [id])
//   customerAddress Address?        @relation("CustomerQuoteAddress", fields: [customerAddressId], references: [id])
//   customerContact Contact?        @relation("CustomerQuoteContact", fields: [customerContactId], references: [id])
//   dealer          Dealer          @relation(fields: [dealerId], references: [id])
//   dealerAddress   Address?        @relation("DealerQuoteAddress", fields: [dealerAddressId], references: [id])
//   dealerContact   Contact?        @relation("DealerQuoteContact", fields: [dealerContactId], references: [id])
//   creator         Employee        @relation("QuoteCreator", fields: [createdById], references: [id])
//   revisions       QuoteRevision[]

//   @@map("quotes")
// }

// enum QuoteRevisionStatus {
//   DRAFT
//   SENT
//   ACCEPTED
//   DECLINED
//   EXPIRED
//   CANCELLED
// }

// model QuoteRevision {
//   id           String              @id @default(uuid())
//   quoteId      String
//   revision     String
//   status       QuoteRevisionStatus
//   subtotal     Decimal
//   taxAmount    Decimal?
//   totalAmount  Decimal
//   currency     String
//   notes        String?
//   createdById  String
//   approvedById String?
//   createdAt    DateTime            @default(now())
//   updatedAt    DateTime            @updatedAt

//   quote    Quote       @relation(fields: [quoteId], references: [id])
//   creator  Employee    @relation("RevisionCreator", fields: [createdById], references: [id])
//   approver Employee?   @relation("RevisionApprover", fields: [approvedById], references: [id])
//   items    QuoteItem[]

//   @@map("quote_revisions")
// }

// model QuoteItem {
//   id              String   @id @default(uuid())
//   quoteRevisionId String
//   configurationId String?
//   quantity        Int
//   unitPrice       Decimal
//   totalPrice      Decimal
//   lineNumber      Int
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt

//   revision      QuoteRevision  @relation(fields: [quoteRevisionId], references: [id])
//   configuration Configuration? @relation(fields: [configurationId], references: [id])

//   @@map("quote_items")
// }
